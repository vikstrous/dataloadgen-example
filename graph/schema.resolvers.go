package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"math/rand"
	"strconv"

	"github.com/vikstrous/dataloadgen-example/graph/loader"
	"github.com/vikstrous/dataloadgen-example/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
// This is a root level resolver and it SHOULD use the storage system directly rather than through loaders.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	// Make sure the user exists
	user, err := r.UserStorage.Get(input.UserID)
	if err != nil {
		return nil, err
	}
	// Since we already fetched the user, priming the cache is a good idea
	// It removes the need for refetching by todoResolver.User later when executing the rest of the query
	loader.PrimeUser(ctx, &user)
	id := strconv.Itoa(rand.Int())
	t := model.Todo{
		ID:     id,
		Text:   input.Text,
		Done:   false,
		UserID: input.UserID,
	}
	err = r.TodoStorage.Put(t)
	return &t, err
}

// Todos is the resolver for the todos field.
// This is a root level resolver and it SHOULD use the storage system directly rather than through loaders.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	todos, err := r.TodoStorage.GetAll()
	if err != nil {
		return nil, err
	}
	return todos, nil
}

// User is the resolver for the user field.
// This is a not a root level resolver so it SHOULD NOT use the storage system directly. This can be called multiple times in parallel and/or on the same keys multiple times. That's why it benefits from using a data loader.
func (r *todoResolver) User(ctx context.Context, obj *model.Todo) (*model.User, error) {
	user, err := loader.GetUser(ctx, obj.UserID)
	if err != nil {
		return nil, err
	}
	return user, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Todo returns TodoResolver implementation.
func (r *Resolver) Todo() TodoResolver { return &todoResolver{r} }

type (
	mutationResolver struct{ *Resolver }
	queryResolver    struct{ *Resolver }
	todoResolver     struct{ *Resolver }
)
